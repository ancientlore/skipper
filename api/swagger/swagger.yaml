---
swagger: "2.0"
info:
  description: "A service that controls many k8s clusters."
  version: "0.1.0"
  title: "skipper"
  termsOfService: ""
  contact:
    name: "Central Architecture Team"
    url: ""
    email: "admin@yourdomain.com"
  license:
    name: "Apache 2.0"
basePath: "/"
consumes:
- "application/json"
produces:
- "application/json"
tags:
  - name: "deployment"
    description: "Resource to define long lived services"
  - name: "cluster"
    description: "Resource to define kubernetes clusters"
  - name: "setup"
    description: "A bash script to configure kubectl for accessing k8s clusters"
  - name: "health"
    description: "Health check"
paths:
  /api/v1/object:
    get:
      x-swagger-router-controller: deployGet
      tags: ["object"]
      description: "Returns all objects from the system that the user has access to"
      operationId: index
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "objectListParams"
          in: "body"
          description: "Object name to return"
          required: true
          schema:
            $ref: "#/definitions/objectListParams"
      responses:
        200:
          description: "deployment list response"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/deploymentList"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      x-swagger-router-controller: deploy
      tags: ["object"]
      description: "Creates a new object.  Duplicates are handled as upgrades."
      operationId: updateIndex
      produces:
        - "application/json"
      parameters:
        -
          name: "objectParams"
          in: "body"
          description: "Object to run or upgrade"
          required: true
          schema:
            $ref: "#/definitions/objectParams"
      responses:
        200:
          description: "Deployment response"
          schema:
            $ref: "#/definitions/deploymentResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      x-swagger-router-controller: deployDelete
      tags: ["deployment"]
      description: "Deletes a object in all contexts for the provided locations."
      operationId: destroy
      produces:
        - "application/json"
      parameters:
        -
          name: "objectDelParams"
          in: "body"
          description: "Object to delete"
          required: true
          schema:
            $ref: "#/definitions/objectDelParams"
      responses:
        200:
          description: "Deployment response"
          schema:
            $ref: "#/definitions/deploymentResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
  /api/v1/deployment:
    get:
      x-swagger-router-controller: deployGet
      tags: ["deployment"]
      description: "Returns all deployments from the system that the user has access to"
      operationId: index
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "deploymentListParams"
          in: "body"
          description: "Deployment to run or upgrade"
          required: true
          schema:
            $ref: "#/definitions/deploymentListParams"
      responses:
        200:
          description: "deployment list response"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/deploymentList"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      x-swagger-router-controller: deploy
      tags: ["deployment"]
      description: "Creates a new deployment.  Duplicates are handled as upgrades."
      operationId: updateIndex
      produces:
        - "application/json"
      parameters:
        -
          name: "deploymentParams"
          in: "body"
          description: "Deployment to run or upgrade"
          required: true
          schema:
            $ref: "#/definitions/deploymentParams"
      responses:
        200:
          description: "Deployment response"
          schema:
            $ref: "#/definitions/deploymentResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      x-swagger-router-controller: deployDelete
      tags: ["deployment"]
      description: "Deletes a deployment in all contexts for the provided locations."
      operationId: destroy
      produces:
        - "application/json"
      parameters:
        -
          name: "deploymentDelParams"
          in: "body"
          description: "Deployment to delete"
          required: true
          schema:
            $ref: "#/definitions/deploymentDelParams"
      responses:
        200:
          description: "Deployment response"
          schema:
            $ref: "#/definitions/deploymentResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
  /api/v1/deployment/{deployment}:
    x-swagger-router-controller: deployGet
    get:
      tags: ["deployment"]
      description: "Returns deployment details and result if the user has access to the deployment"
      operationId: show
      produces:
        - "application/json"
      parameters:
        - name: deployment
          in: path
          description: "Deployment to get details for"
          required: true
          type: string
        - name: version
          in: query
          description: "specific deployment version"
          required: false
          type: integer
          format: "int32"
      responses:
        200:
          description: "deployment response"
          schema:
            $ref: "#/definitions/deploymentResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
  /api/v1/config/cluster:
    x-swagger-router-controller: configCluster
    get:
      tags: ["config"]
      description: "Returns k8s config details"
      operationId: getConfig
      produces:
        - "application/json"
      responses:
        200:
          description: "deployment response"
          schema:
            $ref: "#/definitions/configuration"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    post:
      tags: ["config"]
      description: "Add k8s config item"
      operationId: addConfig
      produces:
        - "application/json"
      parameters:
        - name: location
          in: "body"
          description: "k8s cluster config"
          required: true
          schema:
            $ref: "#/definitions/configuration"
      responses:
        200:
          description: "deployment response"
          schema:
            $ref: "#/definitions/configuration"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
    delete:
      tags: ["config"]
      description: "remove k8s config item"
      operationId: delConfig
      produces:
        - "application/json"
      parameters:
        - name: location
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/configurationOptional"
      responses:
        200:
          description: "deployment response"
          schema:
            $ref: "#/definitions/configuration"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
  /health:
    x-swagger-router-controller: health
    get:
      tags:
          - health
      operationId: health
      produces:
        - "application/json"
      responses:
        200:
          description: "health information"
          schema:
            $ref: "#/definitions/HealthDocument"
  /api/setup:
    x-swagger-router-controller: setup
    get:
      tags: ["setup"]
      operationId: getSetup
      produces:
        - "text/plain"
      consumes:
        - "application/json"
      parameters:
        -
          name: "setupParams"
          in: "body"
          description: "k8s auth info"
          required: true
          schema:
            $ref: "#/definitions/setupParams"
      responses:
        200:
          description: "string response"
          schema:
            $ref: "#/definitions/StringDocument"
definitions:
  objectParams:
    type: "object"
    required:
      - "name"
      - "token"
      - "type"
    properties:
      name:
        type: "string"
        description: "name of the deployment"
      replicas:
        type: "integer"
        format: "int8"
        description: "number of copies of this deployment to run (per cluster)"
        default: 1
      clusters:
        type: "integer"
        format: "int8"
        description: "number of cluster to deploy to in each location"
        default: 1
      containers:
        type: "array"
        items:
          $ref: "#/definitions/containerParams"
        description: "array of containers that are a part of this deployment."
      user:
        type: "string"
        description: "used as the namespace if namespace is not specified."
      namespace:
        type: "string"
        description: "used as the namespace in kubernetes either this or user is required."
      token:
        type: "string"
        description: "used to connect to the kubernetes api"
      targetPort:
        type: "integer"
        format: "int8"
        description: "specify the container port that the service endpoint will route to."
        default: 3000
      type:
        type: "string"
        description: "the type of object provided"
      loadBalanced:
        type: "boolean"
        description: "defaults to true. if you don't want to make this service available outside of the kubernetes clusters set to false."
        default: true
      group:
        type: "string"
        description: "deployment group for this deployment call. can be used for blue/green/canary testing."
      targetGroup:
        type: "string"
        description: "deployment group that the service endpoint will target. defaults to all deployment groups. can be used to quickly switch the endpoint to a different deployment group."
      locations:
        type: "array"
        items:
          $ref: "#/definitions/location"
        description: "deploys to all locations by default. specify which locations to deploy to if necessary."
      autodeploy:
        type: "boolean"
        description: "default = true, deploys updates and new clusters automatically when set to true"
        default: true
      healthCheck:
        type: "string"
        enum:
          - "tcp"
          - "http"
          - "none"
        description: "default is http and based on our standard it will do a health check on the /heath endpoint. At some future date the only option will be http."
        default: "http"
      imagePullSecrets:
        type: "string"
        description: "name of the secret in your namespace that has the login information to a container registry"
      annotations:
        type: "object"
        description: "name-value pairs of annotations to apply to services and deployments"
      f5poolname:
        type: "string"
        description: "overrides the pool name created by the f5 plugin to be the value specified instead of the servicename-namespace. Creates an annotation named f5poolname."
      version:
        type: "string"
        description: "override version from default of container tag or timestamp."
  objectDelParams:
    type: "object"
    required:
      - "name"
      - "token"
      - "type"
    properties:
      name:
        type: "string"
        description: "name of the deployment"
      user:
        type: "string"
        description: "used as the namespace if namespace is not specified."
      namespace:
        type: "string"
        description: "used as the namespace in kubernetes either this or user is required."
      token:
        type: "string"
        description: "used to connect to the kubernetes api"
      type:
        type: "string"
        description: "type of object"
      group:
        type: "string"
        description: "deployment group for this deployment call. can be used for blue/green/canary testing."
      locations:
        type: "array"
        items:
          $ref: "#/definitions/location"
        description: "deploys to all locations by default. specify which locations to deploy to if necessary."
      removeService:
        type: "boolean"
        description: "Defaults to false. When set to true services for this deployment are removed too."
  deploymentParams:
    type: "object"
    required:
      - "name"
      - "containers"
      - "token"
      - "targetPort"
      - "loadBalanced"
    properties:
      name:
        type: "string"
        description: "name of the deployment"
      replicas:
        type: "integer"
        format: "int8"
        description: "number of copies of this deployment to run (per cluster)"
        default: 1
      clusters:
        type: "integer"
        format: "int8"
        description: "number of cluster to deploy to in each location"
        default: 1
      containers:
        type: "array"
        items:
          $ref: "#/definitions/containerParams"
        description: "array of containers that are a part of this deployment."
      user:
        type: "string"
        description: "used as the namespace if namespace is not specified."
      namespace:
        type: "string"
        description: "used as the namespace in kubernetes either this or user is required."
      token:
        type: "string"
        description: "used to connect to the kubernetes api"
      targetPort:
        type: "integer"
        format: "int8"
        description: "specify the container port that the service endpoint will route to."
        default: 3000
      loadBalanced:
        type: "boolean"
        description: "defaults to true. if you don't want to make this service available outside of the kubernetes clusters set to false."
        default: true
      group:
        type: "string"
        description: "deployment group for this deployment call. can be used for blue/green/canary testing."
      targetGroup:
        type: "string"
        description: "deployment group that the service endpoint will target. defaults to all deployment groups. can be used to quickly switch the endpoint to a different deployment group."
      locations:
        type: "array"
        items:
          $ref: "#/definitions/location"
        description: "deploys to all locations by default. specify which locations to deploy to if necessary."
      autodeploy:
        type: "boolean"
        description: "default = true, deploys updates and new clusters automatically when set to true"
        default: true
      healthCheck:
        type: "string"
        enum:
          - "tcp"
          - "http"
          - "none"
        description: "default is http and based on our standard it will do a health check on the /heath endpoint. At some future date the only option will be http."
        default: "http"
      imagePullSecrets:
        type: "string"
        description: "name of the secret in your namespace that has the login information to a container registry"
      annotations:
        type: "object"
        description: "name-value pairs of annotations to apply to services and deployments"
      f5poolname:
        type: "string"
        description: "overrides the pool name created by the f5 plugin to be the value specified instead of the servicename-namespace. Creates an annotation named f5poolname."
  deploymentDelParams:
    type: "object"
    required:
      - "name"
      - "token"
    properties:
      name:
        type: "string"
        description: "name of the deployment"
      user:
        type: "string"
        description: "used as the namespace if namespace is not specified."
      namespace:
        type: "string"
        description: "used as the namespace in kubernetes either this or user is required."
      token:
        type: "string"
        description: "used to connect to the kubernetes api"
      group:
        type: "string"
        description: "deployment group for this deployment call. can be used for blue/green/canary testing."
      locations:
        type: "array"
        items:
          $ref: "#/definitions/location"
        description: "deploys to all locations by default. specify which locations to deploy to if necessary."
      removeService:
        type: "boolean"
        description: "Defaults to false. When set to true services for this deployment are removed too."
  deploymentResult:
    type: "object"
    required:
      - "result"
    properties:
      token:
        type: "string"
      user:
        type: "string"
      deployClusters:
        type: "array"
        items:
          type: "object"
      deleteClusters:
        type: "array"
        items:
          type: "object"
      autodeploy:
        type: "boolean"
      version:
        type: "integer"
        format: "int32"
      loadBalanced:
        type: "boolean"
      locations:
        type: "array"
        items:
          type: "object"
      clusters:
        type: "integer"
        format: "int8"
      targetPort:
        type: "integer"
        format: "int8"
      containers:
        type: "array"
        items:
          type: "object"
      kubercjson:
        type: "object"
      healthCheck:
        type: "string"
      kubesvcjson:
        type: "object"
      serviceType:
        type: "string"
      namespace:
        type: "string"
      name:
        type: "string"
      replicas:
        type: "integer"
        format: "int8"
      message:
        type: "string"
      deploymentStrategy:
        type: "string"
      err:
        type: "boolean"
      result:
        type: "object"
  containerParams:
    type: "object"
    required:
      - "name"
      - "image"
      - "port"
    properties:
      port:
        default: 3000
      periodSeconds:
        type: "integer"
        format: "int32"
        default: 10
        description: "check interval in seconds for both probes"
      readinessPeriodSeconds:
        type: "integer"
        format: "int32"
        default: 10
        description: "check interval in seconds for the readiness probe"
      livenessPeriodSeconds:
        type: "integer"
        format: "int32"
        default: 10
        description: "check interval in seconds for the liveness probe"
      failureThreshold:
        type: "integer"
        format: "int32"
        default: 3
        description: "number of attempts before considered failed for both probes - default = 3"
      livenessFailureThreshold:
        type: "integer"
        format: "int32"
        default: 3
        description: "number of attempts before considered failed for the liveness probe - default = 3"
      readinessFailureThreshold:
        type: "integer"
        format: "int32"
        default: 3
        description: "number of attempts before considered failed for the readiness probe - default = 3"
      emptyDir:
        type: "string"
        description: "directory to mount empty local volumes, can be different across pods but will share data"
      name:
        type: "string"
        default: "testdeployment"
      image:
        type: "string"
      mincpu:
        type: "string"
        description: "minimum cpu that will be requested for this container"
      maxcpu:
        type: "string"
        description: "maximum cpu that will be allowed for this container"
      minmem:
        type: "string"
        description: "minimum memory that will be requested for this container"
      maxmem:
        type: "string"
        description: "maximum memory that will be allowed for this container"
      env:
        type: "array"
        items:
          $ref: "#/definitions/envParams"
      secretmount:
        type: "object"
        items:
          $ref: "#/definitions/containerSecretMountParams"
      configMapEnv:
        type: "array"
        items:
          $ref: "#/definitions/containerConfigEnvParams"
        description: "array of ConfigEnvParams to specify how configmaps get assigned as environment variables."
      configMapMount:
        type: "array"
        items:
          $ref: "#/definitions/containerConfigMountParams"
  location:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
        description: "by default will deploy to a default set of locations and clusters. specify which location if necessary."
      clusters:
        type: "array"
        items:
          type: "string"
        description: "by default will deploy to all clusters at the location specified. specify clusters only if necessary."
  envParams:
    type: "object"
    required:
      - "name"
      - "value"
    properties:
      name:
        type: "string"
      value:
        type: "string"
  containerSecretMountParams:
    type: "object"
    required:
      - "secret"
      - "mountpath"
    properties:
      secret:
        type: "string"
        description: "name of the secret in your namespace that will be mounted to the container"
      mountpath:
        type: "string"
        description: "path inside the container to mount the secret data files. example: /config"
  containerConfigMountParams:
    description: "array of ConfigMountParams to specify how configmaps get mounted as volumes."
    type: "object"
    required:
      - "configMap"
      - "mountPath"
    properties:
      configMap:
        type: "string"
        description: "name of the configmap in your namespace that will be mounted to the container"
      mountPath:
        type: "string"
        description: "path inside the container to mount the configmap data files. example: /config"
  containerConfigEnvParams:
    type: "object"
    required:
      - "configMap"
      - "key"
      - "env"
    properties:
      configMap:
        type: "string"
        description: "name of the configmap in your namespace that will be used to assign environment variables to the container"
      key:
        type: "string"
        description: "name of the record inside the data element of the configmap"
      env:
        type: "string"
        description: "name of the environment variable that the dataitem value will be mapped to."
  deploymentListParams:
    type: "object"
    properties:
      user:
        type: "string"
        description: "if provided, filters results for this user."
      deployment:
        type: "string"
        description: "if provided, filters results for a single deployment."
  objectListParams:
    type: "object"
    properties:
      user:
        type: "string"
        description: "if provided, filters results for this user."
      deployment:
        type: "string"
        description: "if provided, filters results for a single deployment."
      type:
        type: "string"
        description: "the type of object to filter on."
  deploymentList:
    type: "object"
    properties:
      deployments:
        type: "array"
        items:
          type: "string"
  errorModel:
    type: "object"
    required:
      - "result"
    properties:
      code:
        type: "string"
      result:
        type: "object"
  HealthDocument:
    type: "object"
    properties:
      status:
        type: "string"
  setupParams:
    type: "object"
    properties:
      kubeuser:
        type: "string"
        description: "used as the namespace if namespace is not specified."
      namespace:
        type: "string"
        description: "used as the namespace in kubernetes either this or kubeuser is required."
      kubetoken:
        type: "string"
        description: "used to connect to the kubernetes api. kubetoken || token is required."
      token:
        type: "string"
        description: "used to connect to the kubernetes api. kubetoken || token is required."
      context:
        type: "string"
        description: "used to filter results to a single context."
      location:
        type: "string"
        description: "used to filter results to a single location."
  StringDocument:
    type: "string"
  configuration:
    type: "object"
    required:
      - "location"
      - "context"
      - "server"
      - "registry"
      - "defaultENV"
    properties:
      location:
        type: "string"
        description: "location for this cluster, will get added to each container spec as LOCATION environment variable."
      context:
        type: "string"
        description: "config context name to generate for this cluster."
      server:
        type: "string"
        description: "API endpoint for this cluster include the protocol and port if non-standard."
      f5location:
        type: "string"
        description: "f5location for this cluster, will get added to each container spec as f5LOCATION environment variable."
      registry:
        type: "string"
        description: "docker registry fqdn to use for this cluster"
      defaultENV:
        type: "array"
        description: "list of name/value pairs that will be set into the container spec for this cluster."
        items:
          $ref: "#/definitions/envParams"
  configurationOptional:
    type: "object"
    required:
      - "context"
    properties:
      context:
        type: "string"
        description: "config context name to generate for this cluster."